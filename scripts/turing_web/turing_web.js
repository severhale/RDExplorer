// this code was autogenerated from PJS
(function ($p) {
    var GridBuilder = (function () {
        function GridBuilder() {
            var $this_1 = this;

            function $superCstr() {
                $p.extendClassChain($this_1)
            }
            $this_1.GridLayer = (function () {
                function GridLayer() {
                    var $this_2 = this;

                    function $superCstr() {
                        $p.extendClassChain($this_2)
                    }
                    $this_2.boxes = null;
                    $this_2.w = 0;
                    $this_2.h = 0;

                    function draw$1(thickness) {
                        for (var $it0 = new $p.ObjectIterator($this_2.boxes), b = void(0); $it0.hasNext() && ((b = $it0.next()) || true);) {
                            $p.pushMatrix();
                            $p.translate(b.x, b.y, b.z);
                            $p.box($p.width / $this_2.w, $p.height / $this_2.h, thickness);
                            $p.popMatrix();
                        }
                    }
                    $p.addMethod($this_2, 'draw', draw$1, false);

                    function countBoxes$0() {
                        return $this_2.boxes.size();
                    }
                    $p.addMethod($this_2, 'countBoxes', countBoxes$0, false);

                    function $constr_2(g, z) {
                        $superCstr();

                        $this_2.boxes = new $p.ArrayList();
                        $this_2.w = g.w;
                        $this_2.h = g.h;
                        for (var i = 0; i < g.w; i++) {
                            for (var j = 0; j < g.h; j++) {
                                if (g.activatedOnGrid(i, j) && !g.getCell(i, j).isHidden()) {
                                    $this_2.boxes.add(new $p.PVector(i / g.w * $p.width, j / g.h * $p.height, z));
                                }
                            }
                        }
                    }

                    function $constr() {
                        if (arguments.length === 2) {
                            $constr_2.apply($this_2, arguments);
                        } else $superCstr();
                    }
                    $constr.apply(null, arguments);
                }
                return GridLayer;
            })();
            $this_1.g = null;
            $this_1.z = 0;
            $this_1.dz = 0;
            $this_1.layers = null;

            function update$0() {
                $this_1.g.updateNewGrid();
                if ($this_1.layers.size() > 0) {
                    $this_1.g.markHidden();
                    $this_1.layers.set($this_1.layers.size() - 1, new $this_1.GridLayer($this_1.g, $this_1.z - $this_1.dz));
                }
                $this_1.g.switchToNewGrid();
                $this_1.layers.add(new $this_1.GridLayer($this_1.g, $this_1.z));
                $this_1.z += $this_1.dz;
            }
            $p.addMethod($this_1, 'update', update$0, false);

            function draw$1(thickness) {
                for (var $it1 = new $p.ObjectIterator($this_1.layers), l = void(0); $it1.hasNext() && ((l = $it1.next()) || true);) {
                    l.draw(thickness);
                }
            }
            $p.addMethod($this_1, 'draw', draw$1, false);

            function $constr_7(z0, dz, w, h, r1, r2, c) {
                $superCstr();

                $this_1.g = new Grid(w, h, r1, r2, c);
                $this_1.z = z0;
                $this_1.dz = dz;
                $this_1.layers = new $p.ArrayList();
            }

            function $constr() {
                if (arguments.length === 7) {
                    $constr_7.apply($this_1, arguments);
                } else $superCstr();
            }
            $constr.apply(null, arguments);
        }
        return GridBuilder;
    })();
    $p.GridBuilder = GridBuilder;
    var Cell = (function () {
        function Cell() {
            var $this_1 = this;

            function $superCstr() {
                $p.extendClassChain($this_1)
            }
            $this_1.activated = false;
            $this_1.hidden = false;
            $this_1.aboveCell = false;
            $this_1.concentration = 0;
            $this_1.r1 = 0;
            $this_1.r2 = 0;
            $this_1.c = 0;

            function activate$0() {
                $this_1.activated = true;
            }
            $p.addMethod($this_1, 'activate', activate$0, false);

            function deactivate$0() {
                $this_1.activated = false;
            }
            $p.addMethod($this_1, 'deactivate', deactivate$0, false);

            function isActivated$0() {
                return $this_1.activated;
            }
            $p.addMethod($this_1, 'isActivated', isActivated$0, false);

            function addConcentration$1(c) {
                $this_1.concentration += c;
            }
            $p.addMethod($this_1, 'addConcentration', addConcentration$1, false);

            function step$0() {
                $this_1.activated = $this_1.concentration > 0;
                $this_1.concentration = 0;
            }
            $p.addMethod($this_1, 'step', step$0, false);

            function isHidden$0() {
                return $this_1.hidden;
            }
            $p.addMethod($this_1, 'isHidden', isHidden$0, false);

            function aboveCell$0() {
                return $this_1.aboveCell;
            }
            $p.addMethod($this_1, 'aboveCell', aboveCell$0, false);

            function markAboveCell$0() {
                $this_1.aboveCell = true;
            }
            $p.addMethod($this_1, 'markAboveCell', markAboveCell$0, false);

            function markHidden$0() {
                $this_1.hidden = true;
            }
            $p.addMethod($this_1, 'markHidden', markHidden$0, false);

            function $constr_4(r1, r2, c, active) {
                $superCstr();

                $this_1.activated = active;
                $this_1.hidden = false;
                $this_1.aboveCell = false;
                $this_1.concentration = 0;
                $this_1.r1 = r1;
                $this_1.r2 = r2;
                $this_1.c = c;
            }

            function $constr_1(c) {
                $superCstr();

                $this_1.activated = c.activated;
                $this_1.hidden = false;
                $this_1.aboveCell = false;
                $this_1.concentration = c.concentration;
                $this_1.r1 = c.r1;
                $this_1.r2 = c.r2;
                $this_1.c = c.c;
            }

            function $constr() {
                if (arguments.length === 4) {
                    $constr_4.apply($this_1, arguments);
                } else if (arguments.length === 1) {
                    $constr_1.apply($this_1, arguments);
                } else $superCstr();
            }
            $constr.apply(null, arguments);
        }
        return Cell;
    })();
    $p.Cell = Cell;
    var Grid = (function () {
        function Grid() {
            var $this_1 = this;

            function $superCstr() {
                $p.extendClassChain($this_1)
            }
            $this_1.grid = null;
            $this_1.newGrid = null;
            $this_1.w = 0;
            $this_1.h = 0;
            $this_1.r1 = 0;
            $this_1.r2 = 0;
            $this_1.c = 0;

            function distribute$5(target, conc, x, y, r) {
                for (var i = $p.parseInt(x - r); i <= x + r; i++) {
                    for (var j = $p.parseInt(y - r); j <= y + r; j++) {
                        var d = $p.sqrt((x - i) * (x - i) + (y - j) * (y - j));
                        if (d <= r) {
                            if (i < 0 || i >= $this_1.w || j < 0 || j >= $this_1.h) {

                            } else {
                                target[i][j].addConcentration(d / r * conc);
                            }
                        }
                    }
                }
            }
            $p.addMethod($this_1, 'distribute', distribute$5, false);

            function getCell$2(i, j) {
                if (i >= 0 && i < $this_1.w && j >= 0 && j < $this_1.h) {
                    return $this_1.grid[i][j];
                } else {
                    return new Cell($this_1.r1, $this_1.r2, $this_1.c, false);
                }
            }
            $p.addMethod($this_1, 'getCell', getCell$2, false);

            function activatedOnGrid$2(i, j) {
                if (i >= 0 && i < $this_1.w && j >= 0 && j < $this_1.h) {
                    return $this_1.grid[i][j].isActivated();
                } else {
                    return false;
                }
            }
            $p.addMethod($this_1, 'activatedOnGrid', activatedOnGrid$2, false);

            function updateNewGrid$0() {
                for (var i = 0; i < $this_1.w; i++) {
                    for (var j = 0; j < $this_1.h; j++) {
                        if ($this_1.$self.activatedOnGrid(i, j)) {
                            $this_1.$self.distribute($this_1.newGrid, 1, i, j, $this_1.grid[i][j].r1);
                            $this_1.$self.distribute($this_1.newGrid, $this_1.grid[i][j].c, i, j, $this_1.grid[i][j].r2);
                        }
                    }
                }
            }
            $p.addMethod($this_1, 'updateNewGrid', updateNewGrid$0, false);

            function markHidden$0() {
                for (var i = 0; i < $this_1.w; i++) {
                    for (var j = 0; j < $this_1.h; j++) {
                        $this_1.newGrid[i][j].step();
                        if ($this_1.newGrid[i][j].isActivated() && $this_1.grid[i][j].isActivated()) {
                            $this_1.newGrid[i][j].markAboveCell();
                            if ($this_1.$self.activatedOnGrid(i - 1, j) && $this_1.$self.activatedOnGrid(i + 1, j) && $this_1.$self.activatedOnGrid(i, j - 1) && $this_1.$self.activatedOnGrid(i, j + 1)) {
                                $this_1.grid[i][j].markHidden();
                            }
                        }
                    }
                }
            }
            $p.addMethod($this_1, 'markHidden', markHidden$0, false);

            function switchToNewGrid$0() {
                for (var i = 0; i < $this_1.w; i++) {
                    for (var j = 0; j < $this_1.h; j++) {
                        $this_1.grid[i][j] = new Cell($this_1.newGrid[i][j]);
                    }
                }
            }
            $p.addMethod($this_1, 'switchToNewGrid', switchToNewGrid$0, false);

            function draw$1(thickness) {
                $p.noFill();
                for (var i = 0; i < $this_1.w; i++) {
                    for (var j = 0; j < $this_1.h; j++) {
                        if ($this_1.$self.activatedOnGrid($p.parseInt(i), $p.parseInt(j))) {
                            $p.stroke(0);
                        } else {
                            $p.noStroke();
                        }
                        $p.pushMatrix();
                        $p.translate(i / $this_1.w * $p.width, j / $this_1.h * $p.height);
                        $p.box($p.width / $this_1.w, $p.height / $this_1.h, thickness);
                        $p.popMatrix();
                    }
                }
            }
            $p.addMethod($this_1, 'draw', draw$1, false);

            function draw2D$0() {
                $p.noStroke();
                for (var i = 0; i < $this_1.w; i++) {
                    for (var j = 0; j < $this_1.h; j++) {
                        if ($this_1.$self.activatedOnGrid(i, j)) {
                            $p.fill(0);
                        } else {
                            $p.noFill();
                        }
                        $p.rect(i / $this_1.w * $p.width, j / $this_1.h * $p.height, $p.width / $this_1.w, $p.height / $this_1.h);
                    }
                }
            }
            $p.addMethod($this_1, 'draw2D', draw2D$0, false);

            function $constr_5(w, h, r1, r2, c) {
                $superCstr();

                $this_1.w = w;
                $this_1.h = h;
                $this_1.r1 = r1;
                $this_1.r2 = r2;
                $this_1.c = c;
                $this_1.grid = $p.createJavaArray('Cell', [w, h]);
                $this_1.newGrid = $p.createJavaArray('Cell', [w, h]);
                for (var i = 0; i < w; i++) {
                    for (var j = 0; j < h; j++) {
                        $this_1.grid[i][j] = new Cell(r1, r2, c, ($p.abs($p.parseFloat(i) / w - .5) < .1 && $p.abs($p.parseFloat(j) / h - .5) < .1 && $p.random(1) < .5));
                        $this_1.newGrid[i][j] = new Cell($this_1.grid[i][j]);
                    }
                }
            }

            function $constr() {
                if (arguments.length === 5) {
                    $constr_5.apply($this_1, arguments);
                } else $superCstr();
            }
            $constr.apply(null, arguments);
        }
        return Grid;
    })();
    $p.Grid = Grid;

    var g = null;
    var folder = null;
    var r1 = 4;
    var r2 = 8;
    var c = -.25;

    function setup() {
        $p.size(450, 450, $p.P3D);
        folder = $p.month() + "-" + $p.day() + "-" + $p.year() + "/" + $p.hour() + ";" + $p.minute() + "," + $p.second();

        $p.noStroke();
        $p.fill(128);
        g = new GridBuilder(-500, 5, 100, 100, r1, r2, c);
        $p.background(255);
    }
    $p.setup = setup;
    setup = setup.bind($p);

    function draw() {
        $p.lights();

        $p.pushMatrix();

        $p.background(255);

        $p.translate($p.width / 2, $p.height / 2, g.z);
        $p.rotateX($p.PI / 2.5);
        $p.rotateZ($p.frameCount * .01);
        $p.rotateY($p.PI);
        $p.translate(-$p.width / 2, -$p.height / 2, -(-500 + g.z) / 2);

        g.draw(5);

        $p.popMatrix();
    }
    $p.draw = draw;
    draw = draw.bind($p);

    function mouseClicked() {
        g.update();
    }
    $p.mouseClicked = mouseClicked;
    mouseClicked = mouseClicked.bind($p);

    function keyPressed() {
        if ($p.key == (new $p.Character(' '))) {
            setup();
        }
    }
    $p.keyPressed = keyPressed;
    keyPressed = keyPressed.bind($p);
})